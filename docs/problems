host functions cannot be called from device code -- means none of c standard libraries are available to cuda
makes code reuse very difficult
forced implemenation of linear congruential random number generator


hard to write clean code because of reuse limitations

learning how to properly decompose code is hard -- similar to issues with cell -- you're writing and compiling in 2 languages -- makes build process difficult

Error: External calls are not supported (found non-inlined call to _Z12device_frandiff)
(device functions called from kernel are inlined, semantics on what is able to be inlined is unclear -- does this mean code has to be in a single file?)




http://gpuray.blogspot.com/2009/07/compiling-cuda-projects.html
(example of old guides, even a year old compilers and libries have changed)


making makefile portable hard -- sdk examples provide build scripts, but they are overly complicated for simple purposes (or for learning the libraries/build path) they present too many options/configurability at once


lack of good debugging techniques/tools for kernel functions -- have to copy data back to host memory to inspect it in c


"Run time limit on kernels" printed from ./deviceQuery
limited testing since running on single gfx card


originally had particle struct for convenience -- replaced with arrays for each particle field to better fit cuda memory model (discuss coalesing / no caching )


Notes:
resampling:

calculate new weights
calculate sum
multiply by num_particles/sum
calculate cumulative sum
round all values down (w[n] - w[n-1] is the number of particles n should be resampled into)


include cpu specs as output by deviceQuery


keep data in global memory -- keep all computations on gpu -- tempting to move back to cpu for some, but slow mem bandwidth


where are pointers (on host or device?) example: structure of arrays (can't allocate structure with cudaMalloc since pointer will be on device and will fail when you try to access the struct members from the host to cudaMalloc them) -- need to pass struct by value to kernel



RUNNING CUDA PROFILER

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/cudaprof/bin
/usr/local/cuda/cudaprof/bin/cudaprof



thrust gather

http://thrust.googlecode.com/svn/tags/1.1.0/doc/html/group__gathering.html
http://code.google.com/p/thrust/source/browse/examples/dot_products_with_zip.cu?r=1.2.0
http://code.google.com/p/thrust/wiki/QuickStartGuide






REMEMBER TO MENTION SVN REPOSITORY (code available, shows development process, give URL)

